package com.bookapp.testcases;

import static org.junit.Assert.fail;

import java.util.Arrays;
import java.util.List;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.bookapp.model.Book;
import com.bookapp.service.IBookService;
import com.bookapp.service.OrderDetails;
@RunWith(JUnitplatform.class)
 class BookOrderDetailsTest {
	@Mock
	IBookService bookService1;// creating a proxy
	
	// creates an object of OrderDetails();
	//injects bookservice into orderDetails using tester
	@InjectMocks
	
	OrderDetails orderDetails;
	List<Book> bookList;
	Book book1, book2,book3, book4, book5, book6;
	
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@BeforeEach
	public void setUp() throws Exception {
		orderDetails = new OrderDetails();
		book1 = new Book("java","kathy",1900,1);
		book2 = new Book("spring","kathy",800,2);
		book3 = new Book("java","joe",800,3);
		book4 = new Book("leadership","kathy",1800,4);
		book5 = new Book("JSP","kathy",800,5);
		book6 = new Book("miracle","kathy",800,6);
		bookList = Arrays.asList(book1,book2,book3,book4,book5,book6)
	}
	

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testShowBooks() {
		String author = "kathy";
		List<Book> booksByAuthor = Arrays.asList(book1,book2,book4,book5,book6);
		Mockito.when(bookService.getByAuthor(author)).thenReturn(booksByAuthor);
		List<Book>expected = Arrays.asList(book3,book1,book5);
		//method to be tested
		List<Book> actual = orderDetails.showBooks(author);
		asertEquals(expected,actual)
		fail("Not yet implemented");
	}

}
